generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  bio         String
  category    String
  categoryId  String?
  categoryRef ContentCategory? @relation(fields: [categoryId], references: [id])
  image       String
  thumbnail   String
  yearsActive Int
  tracksReleased Int
  streams     Int
  youtube     String?  @db.Text
  instagram   String?  @db.Text
  twitter     String?  @db.Text
  tiktok      String?  @db.Text
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videos      Video[]
  events      Event[]  @relation("EventLineup")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  artistId    String
  artist      Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  youtubeId   String   @unique
  description String
  thumbnail   String
  category    String
  categoryId  String?
  categoryRef ContentCategory? @relation(fields: [categoryId], references: [id])
  featured    Boolean  @default(false)
  views       Int      @default(0)
  uploadDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  type        String
  categoryId  String?
  categoryRef ContentCategory? @relation(fields: [categoryId], references: [id])
  status      String   @default("upcoming")
  image       String
  featured    Boolean  @default(false)
  ticketPrice Float?
  ticketUrl   String?
  capacity    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lineup      Artist[] @relation("EventLineup")
}

model NewsArticle {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.Text
  image       String
  excerpt     String       @db.VarChar(200)
  author      String
  publishedAt DateTime     @default(now())
  category    NewsCategory
  categoryId  String?
  categoryRef ContentCategory? @relation(fields: [categoryId], references: [id])
  featured    Boolean      @default(false)
  links       Json         @default("[]")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SiteSettings {
  id         String   @id @default(cuid())
  socialLinks Json     @default("[]")
  team        Json     @default("[]")
  getInTouch  Json     @default("{}")
  featuredPlaylist Json @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("pending") // pending, read, replied, closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  status    String   @default("active") // active, unsubscribed, bounced
  source    String   @default("website") // website, event, referral
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id        String   @id @default(cuid())
  page      String
  event     String
  data      Json     @default("{}")
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
}

model ContentCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color for UI
  icon        String?  // Icon class or URL
  parentId    String?
  parent      ContentCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ContentCategory[] @relation("CategoryHierarchy")
  videos      Video[]
  newsArticles NewsArticle[]
  events      Event[]
  artists     Artist[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum NewsCategory {
  GENERAL
  RELEASES
  EVENTS
  INTERVIEWS
  INDUSTRY
}


